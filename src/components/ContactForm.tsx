import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import Icon from "@/components/ui/icon";

interface FormData {
  name: string;
  contact: string;
  message: string;
}

const ContactForm = () => {
  const [formData, setFormData] = useState<FormData>({
    name: "",
    contact: "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
  ) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const message = `üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É!\n\nüë§ –ò–º—è: ${formData.name}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç: ${formData.contact}\nüí≠ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${formData.message}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @Elliot_BoBot
      const response = await fetch(
        `https://api.telegram.org/bot7902938475:AAG_s8dYgxKNpL9KX8HSwBhNu8CJqx5P9fs/sendMessage`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: "-1002423648019",
            // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id:
            // 1. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –≤ Telegram
            // 2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @Elliot_BoBot –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            // 3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            // 4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: https://api.telegram.org/bot7902938475:AAG_s8dYgxKNpL9KX8HSwBhNu8CJqx5P9fs/getUpdates
            // 5. –ù–∞–π–¥–∏—Ç–µ "chat":{"id": -XXXXXXXXX} –≤ –æ—Ç–≤–µ—Ç–µ
            text: message,
            parse_mode: "HTML",
          }),
        },
      );

      if (response.ok) {
        setIsSuccess(true);
      } else {
        throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:", error);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isSuccess) {
    return (
      <div className="text-center py-8 animate-fade-in">
        <Icon
          name="CheckCircle"
          size={64}
          className="mx-auto text-green-500 mb-4"
        />
        <h3 className="text-2xl font-semibold text-foreground mb-2 font-rubik">
          –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
        </h3>
        <p className="text-muted-foreground font-rubik">
          –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏
        </p>
        <Button
          onClick={() => {
            setIsSuccess(false);
            setFormData({ name: "", contact: "", message: "" });
          }}
          variant="outline"
          className="mt-6 font-rubik"
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∑–∞—è–≤–∫—É
        </Button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-2">
        <Label htmlFor="name" className="font-rubik font-medium">
          –í–∞—à–µ –∏–º—è
        </Label>
        <Input
          id="name"
          name="name"
          type="text"
          value={formData.name}
          onChange={handleChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
          required
          className="font-rubik"
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="contact" className="font-rubik font-medium">
          –ö–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email)
        </Label>
        <Input
          id="contact"
          name="contact"
          type="text"
          value={formData.contact}
          onChange={handleChange}
          placeholder="+7 (900) 123-45-67 –∏–ª–∏ example@mail.ru"
          required
          className="font-rubik"
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="message" className="font-rubik font-medium">
          –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å?
        </Label>
        <Textarea
          id="message"
          name="message"
          value={formData.message}
          onChange={handleChange}
          placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —á—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏"
          rows={4}
          required
          className="font-rubik"
        />
      </div>

      <Button
        type="submit"
        className="w-full font-rubik font-medium text-lg py-6"
        disabled={isSubmitting}
      >
        {isSubmitting ? (
          <>
            <Icon name="Loader2" size={20} className="animate-spin mr-2" />
            –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
          </>
        ) : (
          <>
            <Icon name="Send" size={20} className="mr-2" />
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
          </>
        )}
      </Button>
    </form>
  );
};

export default ContactForm;
